'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var requestSuffix = '_REQUEST';
var rejectSuffix = '_FAIL';
var resolveSuffix = '';

var request = exports.request = function request(type) {
  return type + requestSuffix;
};
var reject = exports.reject = function reject(type) {
  return type + rejectSuffix;
};
var resolve = exports.resolve = function resolve(type) {
  return type + resolveSuffix;
};

var createPromiseMiddleware = exports.createPromiseMiddleware = function createPromiseMiddleware(newRequestSuffix, newRejectSuffix, newResolveSuffix) {
  requestSuffix = newRequestSuffix || requestSuffix;
  rejectSuffix = newRejectSuffix || rejectSuffix;
  resolveSuffix = newResolveSuffix || resolveSuffix;

  return function promiseMiddleware(_ref) {
    var dispatch = _ref.dispatch;

    return function (next) {
      return function (action) {
        var type = action.type;
        var payload = action.payload;
        var meta = action.meta;


        if (!payload || typeof payload.then !== 'function' && (!payload.promise || typeof payload.promise.then !== 'function')) return next(action);

        var promise = typeof payload.then === 'function' ? payload : payload.promise;

        var SUCCESS = resolve(type);
        var REQUEST = request(type);
        var FAILURE = reject(type);

        var metaClone = {};
        if (meta) {
          metaClone.meta = _extends({}, meta);
        }
        var payloadClone = {};
        if (promise !== payload) {
          payloadClone.payload = _extends({}, payload);
          delete payloadClone.payload.promise;
        }

        next(_extends({}, metaClone, payloadClone, { type: REQUEST }));

        if (promise !== payload) {
          metaClone.meta = meta || {};
          metaClone.meta.originalPayload = payloadClone.payload;
        }
        return promise.then(function (result) {
          dispatch(_extends({}, metaClone, { payload: result, type: SUCCESS }));
          return result;
        }, function (error) {
          dispatch(_extends({}, metaClone, { error: error, type: FAILURE }));
          return error;
        });
      };
    };
  };
};

exports.default = createPromiseMiddleware();