{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar requestSuffix = '_REQUEST';\nvar rejectSuffix = '_FAIL';\nvar resolveSuffix = '';\n\nvar request = exports.request = function request(type) {\n  return type + requestSuffix;\n};\n\nvar reject = exports.reject = function reject(type) {\n  return type + rejectSuffix;\n};\n\nvar resolve = exports.resolve = function resolve(type) {\n  return type + resolveSuffix;\n};\n\nvar createPromiseMiddleware = exports.createPromiseMiddleware = function createPromiseMiddleware(newRequestSuffix, newRejectSuffix, newResolveSuffix) {\n  requestSuffix = newRequestSuffix || requestSuffix;\n  rejectSuffix = newRejectSuffix || rejectSuffix;\n  resolveSuffix = newResolveSuffix || resolveSuffix;\n  return function promiseMiddleware(_ref) {\n    var dispatch = _ref.dispatch;\n    return function (next) {\n      return function (action) {\n        var type = action.type;\n        var payload = action.payload;\n        var meta = action.meta;\n        if (!payload || typeof payload.then !== 'function' && (!payload.promise || typeof payload.promise.then !== 'function')) return next(action);\n        var promise = typeof payload.then === 'function' ? payload : payload.promise;\n        var SUCCESS = resolve(type);\n        var REQUEST = request(type);\n        var FAILURE = reject(type);\n        var metaClone = {};\n\n        if (meta) {\n          metaClone.meta = _extends({}, meta);\n        }\n\n        var payloadClone = {};\n\n        if (promise !== payload) {\n          payloadClone.payload = _extends({}, payload);\n          delete payloadClone.payload.promise;\n        }\n\n        next(_extends({}, metaClone, payloadClone, {\n          type: REQUEST\n        }));\n\n        if (promise !== payload) {\n          metaClone.meta = meta || {};\n          metaClone.meta.originalPayload = payloadClone.payload;\n        }\n\n        return promise.then(function (result) {\n          dispatch(_extends({}, metaClone, {\n            payload: result,\n            type: SUCCESS\n          }));\n          return result;\n        }, function (error) {\n          dispatch(_extends({}, metaClone, {\n            error: error,\n            type: FAILURE\n          }));\n          return error;\n        });\n      };\n    };\n  };\n};\n\nexports.default = createPromiseMiddleware();","map":null,"metadata":{},"sourceType":"script"}